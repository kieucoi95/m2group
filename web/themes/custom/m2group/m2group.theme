<?php

use \Drupal\block_content\BlockContentInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/**
 * @file
 * Functions to support theming in the m2group theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function m2group_preprocess(&$variables) {
  // Get path logo
  $variables['logo'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function m2group_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function m2group_page_attachments_alter(array &$page) {
  $config = \Drupal::config('m2group_custom.settings');
  $product_url = $config->get('product_page_url');
  $station_lv4_url = $config->get('station_lv4_page_url');
  $page['#attached']['drupalSettings']['m2group'] = [
      'product_url' => $product_url,
      'station_lv4_url' => $station_lv4_url
  ];
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function m2group_preprocess_page(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function m2group_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function m2group_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function m2group_preprocess_views_view(&$variables) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function m2group_preprocess_block(&$variables) {
  $variables['base_path'] = base_path();
  $content = $variables['elements']['content'];

  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $blockType = $content['#block_content']->bundle();

    if ($blockType === 'rental_process') {
      $variables['items'] = [];
      foreach ($content['field_process'] as $key => $value) {
        if (is_numeric($key)) {
          $title = $value['#paragraph']->field_title->getValue()[0]['value'];
          $desc = $value['#paragraph']->field_description->getValue()[0]['value'];
          $variables['items'][] = [
            'title' => $title,
            'desc' => $desc,
          ];
        }
      }
    }

    if ($blockType === 'faq') {

      $variables['items_1'] = [];
      foreach ($content['field_faq_contract'] as $key => $value) {
        if (is_numeric($key)) {
          $title = $value['#paragraph']->field_title->getValue()[0]['value'];
          $desc = $value['#paragraph']->field_description->getValue()[0]['value'];
          $variables['items_1'][] = [
            'title' => $title,
            'desc' => $desc,
          ];
        }
      }

      $variables['items_2'] = [];
      foreach ($content['field_faq_cost'] as $key => $value) {
        if (is_numeric($key)) {
          $title = $value['#paragraph']->field_title->getValue()[0]['value'];
          $desc = $value['#paragraph']->field_description->getValue()[0]['value'];
          $variables['items_2'][] = [
            'title' => $title,
            'desc' => $desc,
          ];
        }
      }

      $variables['items_3'] = [];
      foreach ($content['field_faq_house'] as $key => $value) {
        if (is_numeric($key)) {
          $title = $value['#paragraph']->field_title->getValue()[0]['value'];
          $desc = $value['#paragraph']->field_description->getValue()[0]['value'];
          $variables['items_3'][] = [
            'title' => $title,
            'desc' => $desc,
          ];
        }
      }

    }

    if ($blockType === 'home_navigation') {
      $variables['items'] = [];
      foreach ($content['field_navigation'] as $key => $value) {
        if (is_numeric($key)) {
          $title = '';
          $link = '';

          if (!empty($value['#paragraph']->field_title->getValue())) {
            $title = $value['#paragraph']->field_title->getValue()[0]['value'];
          }

          if (!empty($value['#paragraph']->field_link->getValue())) {
            $link = $value['#paragraph']->field_link->getValue()[0]['value'];
          }

          $img_id = $value['#paragraph']->field_image->getValue()[0]['target_id'];
          $img_id = File::load($img_id);
          $img_uri = $img_id->getFileUri();
          $variables['items'][] = [
            'title' => $title,
            'link' => $link,
            'img' => $img_uri
          ];
        }
      }
    }

    if ($blockType === 'home_promo') {
      $variables['items'] = [];
      foreach ($content['field_banner'] as $key => $value) {
        if (is_numeric($key)) {
          $link = '';

          if (!empty($value['#paragraph']->field_link->getValue())) {
            $link = $value['#paragraph']->field_link->getValue()[0]['value'];
          }

          $img_id = $value['#paragraph']->field_image->getValue()[0]['target_id'];
          $img_alt = $value['#paragraph']->field_image->getValue()[0]['alt'];
          $img_id = File::load($img_id);
          $img_uri = $img_id->getFileUri();

          $variables['items'][] = [
            'link' => $link,
            'img' => $img_uri,
            'alt' => $img_alt
          ];
        }
      }
    }

    if ($blockType === 'home_utilities') {
      $variables['items'] = [];
      foreach ($content['field_utilities'] as $key => $value) {
        if (is_numeric($key)) {
          $title = '';
          $description = '';

          if (!empty($value['#paragraph']->field_title->getValue())) {
            $title = $value['#paragraph']->field_title->getValue()[0]['value'];
          }

          if (!empty($value['#paragraph']->field_description->getValue())) {
            $description = $value['#paragraph']->field_description->getValue()[0]['value'];
          }

          $img_id = $value['#paragraph']->field_image->getValue()[0]['target_id'];
          $img_alt = $value['#paragraph']->field_image->getValue()[0]['alt'];
          $img_id = File::load($img_id);
          $img_uri = $img_id->getFileUri();

          $variables['items'][] = [
            'title' => $title,
            'description' => $description,
            'img' => $img_uri,
            'alt' => $img_alt
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function m2group_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function m2group_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function m2group_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function m2group_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function m2group_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function m2group_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function m2group_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function m2group_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function m2group_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function m2group_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}


/**
 * Implements hook_theme_suggestions_block_alter() to add classes to the search form.
 */
function m2group_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block bundles.
    if (isset($variables['elements']['content']['#block_content'])) {
        array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
    }
}
